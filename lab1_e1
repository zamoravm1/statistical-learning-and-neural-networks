% K-nn classifier N dimensions - Nc classes
% author: Zamora

close all
clc
%% Fixing data and defined variables.
load localization.mat  
% M = Measurements by point or sensor number. NumColums
% D = Feautures or dimensions. NumRows
% Nc = NumClasses
% traindata [M D Nc]
% Permuted for later use fn sortrows 
% new organization [D M Nc]
%dataset_mul=permute(traindata,[2 1 3]);
%[D,M, Nc] = size(dataset_mul); 
[D,M,Nc] = size(traindata);
n=1;
%k = round(sqrt(n_samples));
% Vector accuracy
Accur_train=zeros(20,1);
% Accur_test=zeros(100,1);
data_train=zeros(n,D+1);
for z=1:Nc
    for i=1:M
        data_train(n,1:D)=traindata(:,i,z);
        data_train(n,D+1)=z;
        n=n+1;
    end 
end
%% K-NN Classifier
for k=1:20
    Accur_train(k,1) = K_NN_train(data_train,D,k,Nc);
end
figure
plot(Accur_train,'g')
grid
title('K vs Accuracy - RSSI')
xlabel('K ')
ylabel('Accuracy')
legend('Train data')
%hold off
%% Classifying test
data_test=zeros(Nc,D);
k=4;
act_class=zeros(1,M);
realclass=zeros(1,Nc);
total_class=zeros(Nc,M);
for z=1:Nc
    for i=1:M
        tofind=transpose(testdata(:,i,z));
        %tofind=transpose(traindata(:,i,z));
        act_class(1,i)=K_NN_classifier(tofind,data_train,D,k,Nc);
    end 
    total_class(z,:)= act_class(1,:);
end
classes = mode(transpose(total_class));
function [accuracy] = K_NN_train(data,D,k,Nc)
    % K selected
    % D - features
    % data [n_samples,D+1] with correct class in D+1 
    n_samples = length(data);
    dataset_training = data;
    % For save distance btw point temporaly
    dataset_training(:,D+2) = 0; 
    % For save class by classification
    dataset_training(:,D+3) = 0; 
    
    % Counters
    class=zeros(1,Nc);
    correct_class=0;
    for i=1:n_samples
            %Select a test point to classify
            test_point = dataset_training(i,1:D);
            for j=1:n_samples
                %Select a second point to find distance.
                testi_point = dataset_training(j,1:D);
                %Calculate Distance btw points
                dist = pdist2(test_point,testi_point);           
                % Save distance between point for each position
                dataset_training(j,D+2)= dist; 
            end
            
            % Organize smallest to largest, with respect to distance.
            training_set=sortrows(dataset_training,D+2);
            % Classify
            for m=1:k
                act_class=training_set(m+1,D+1);
                class(1,act_class)=class(1,act_class)+1;
            end
            [Maxi,I] = max(class);
            dataset_training(i,D+3)= I;
    
            % Restarting class counter    
            class(1,:)=0;
            
            % Evaluate classification
            if dataset_training(i,D+3) == dataset_training(i,D+1)
                correct_class=correct_class+1;
            end
            fprintf('running \n')
    end
    fprintf('job done \n')
    accuracy= correct_class/n_samples;
end
function [class] = K_NN_classifier(test_point,testing_data,D,k,Nc)
    % K selected
    % D - features
    % data [n_samples,D+1] with correct class in D+1 
    n_samples = length(testing_data);
    dataset_training = testing_data;
    % For save distance btw point temporaly
    dataset_training(:,D+2) = 0; 
    % For save class by classification
    dataset_training(:,D+3) = 0; 
    
    % Counters
    class=zeros(1,Nc);
    
    for j=1:n_samples
        %Select a second point to find distance.
        testi_point = dataset_training(j,1:D);
        %Calculate Distance btw points
        dist = pdist2(test_point,testi_point);           
        % Save distance between point for each position
        dataset_training(j,D+2)= dist; 
    end
    
    % Organize smallest to largest, with respect to distance.
    training_set=sortrows(dataset_training,D+2);
    
    % Classify
    for m=1:k
        act_class=training_set(m+1,D+1);
        class(1,act_class)=class(1,act_class)+1;
    end
    
    [M,Index_max] = max(class);
    class = Index_max;
end
